{{#app-page
  repo='ui-slider'
  npm='ui-ember-slider-fork'
  repoOwner='lifegadget'
  subHeading='A versatile slider control for ambitious Ember apps'
  currentPath=currentPath
}}
<h3>Background</h3>
<p>
  This control sits on the shoulder of the great work from @seiyria and @rovolution on their <a href="https://github.com/seiyria/bootstrap-slider">bootstrap-slider</a> control. The primary focus of this Ember addon is just to make this work easily accessible to Ember developers.
</p>
<h3>Basic Usage</h3>
<row>
  <component>
    {{ui-slider}}
  </component>
  <code>
    {{display-component componentName='ui-slider'}}
  </code>
  <description>
    A plain slider control defaults to 1 to 10 integer slider. It also defaults to taking up the available horizontal space given to it. You can change that
  </description>
</row>
<row>
  <component>
    {{ui-slider
      value=value
      min=min
      max=max
      step=step
      orientation=orientation
      tooltip=tooltip
      disabled=disabled
      handle=handle
      reversed=reversed
      selection=selection
      tooltipPosition=tooltipPosition
      focus=focus
      naturalArrowKeys=naturalArrowKeys
      immediateResponse=immediateResponse
    }}
  </component>
  <code>
    {{display-component componentName='ui-slider'
      value=value
      min=min
      max=max
      step=step
      orientation=orientation
      tooltip=tooltip
      disabled=disabled
      handle=handle
      selection=selection
      reversed=reversed
      tooltipPosition=tooltipPosition
      focus=focus
      naturalArrowKeys=naturalArrowKeys
      immediateResponse=immediateResponse
    }}
  </code>
  <description>
    The most basic parameters are those used to set the appropriate range of numbers:

    <controls>
      <control>
        <span class='name'>min</span>
        <span>{{numeric-input step=1 skin='flat' value=min onChange=(mut min)}}</span>
        <span></span>
        <span class='name'>max</span>
        <span>{{numeric-input step=1 skin='flat' value=max onChange=(mut max)}}</span>
        <span class='name'>step</span>
        <span>{{numeric-input step=0.25 skin='flat' value=step onChange=(mut step)}}</span>
      </control>
    </controls>
    <controls>
      <control>
        <span class='name'>It is also possible to enable/disable</span>
        <span>{{ui-toggle-button on='disabled' off='enabled' value=disabled onToggle=(mut disabled)}}</span>
      </control>
      <control>
        <span class='name'>Tooltips can be:</span>
        <span>
          {{radio-buttons buttons='show,hide,always' value=tooltip size='small' onChange=(mut tooltip)}} &nbsp;
          {{radio-buttons buttons='top,bottom' value=tooltipPosition size='small' onChange=(mut tooltipPosition)}}
        </span>
      </control>
      <control>
        <span class='name'>Handle shape:</span>
        <span>{{radio-buttons buttons='round,square,triangle,rect' value=handle size='small' onChange=(mut handle)}}</span>
      </control>
      <control>
        <span class='name'>Reversed:</span>
        <span>{{ui-toggle-button on='reversed' off='normal' value=reversed onToggle=(mut reversed)}}</span>
        <span class='name'>↑/↓ Direction:</span>
        <span>{{ui-toggle-button on='direction' off='numeric' value=naturalArrowKeys onToggle=(mut naturalArrowKeys)}}</span>
      </control>
      <control>
        <span class='name'>Selection:</span>
        <span>{{radio-buttons buttons='before,after,none' value=selection  onChange=(mut tooltip)}}</span>
      </control>
      <control>
        <span class='name'>Focus:</span>
        <span>{{ui-toggle-button on='focus' off='do not focus' value=focus onToggle=(mut focus)}}</span>
      </control>
      <control>
        <span class='name'>Orientation:</span>
        <span>{{radio-buttons buttons='horizontal,vertical' value=orientation size='small' onChange=(mut orientation)}}</span>
      </control>
      <p class='downer'>
        Also notice that the value property is being updated only when the user finishes the slide. This is often a desirable effect and it is more efficient that constantly reacting to each movement but if you need immediate response you can turn it on.
      </p>
      <control>
        <span class='name'>Immediate Response:</span>
        <span>{{ui-toggle-button on='immediate' off='after release' value=immediateResponse onToggle=(mut immediateResponse)}}</span>
      </control>
    </controls>
  </description>
</row>

<h3>Mood Styling and Sections</h3>
<row>
  <component>
    {{ui-slider
      mood=mood
    }}
  </component>
  <code>
    {{display-component componentName='ui-slider'
      mood=mood
    }}
  </code>
  <description>
    This control provides lots of CSS hooks to style off of but also includes some standard ones that might be helpful out of the box:
    <controls>
      <control>
      <span class='name'>mood:</span>
        <span>{{radio-buttons buttons='none:::null,success,info,warning,error' value=mood  onChange=(mut mood)}}</span>
      </control>
    </controls>
    <p>
      All that's happening in this situation is the mood property is being added as a class called <prop>mood-[xxxx]</prop>. These properties are defined and of course you can set your own or override these.
    </p>
  </description>
</row>
<row>
  <component>
    {{ui-slider
      mood=mood2
      sections=sections
      action='sectionsAction'
      max=100
    }}
  </component>
  <code>
    {{display-component componentName='ui-slider'
      mood=mood2
      sections=sections
      max=100
    }}
  </code>
  <description>
    Beyond <i>mood styling</i>, you can segment the range of your slider into discrete section and style differently based on value. This can either be done by stating how many sections to divy up your values range up by or by stating discrete boundaries for the sections.
    <controls>
      <control>
        <span class='name'>mood:</span>
        <span>{{radio-buttons buttons='success,info,warn::warning,err::error,rag,gar,ragar' value=mood2 size='small' onChange=(mut mood2)}}</span>
      </control>
      <control>
        <span class='name'>sections:</span>
        <span>{{radio-buttons buttons='none:::null,3:::3,4:::4,5:::5,10:::10,discrete:::10|30|70|90' value=sections size='small'  onChange=(mut sections)}}</span>
      </control>
    </controls>
    <p>
      Now whenever the value changes it recalculates what "section" it is and applies the meta-information. The mood settings do have some values for sectional variation so you'll see the gradiation as you move it back and forth but check the underlying HTML to understand what's happening.
    </p>
    <note>
      <b>Note:</b> we added a few non-bootstrap like "moods" because they are particularly useful in sliders. Try out the "rag" mood (aka, Red-Amber-Green) with 3-sections or try "ragar" (e.g., green in the middle) with either 5 sections or the <i>discrete</i> setting.
    </note>
  </description>
</row>

<h3>Ticks</h3>
<row>
  <component>
    {{ui-slider
      ticks="0,100,200,300,400"
      ticksLabels="$0,$100,$200,$300,$400"
      ticksSnapBounds=15
      tooltip='hide'
      min=0
      max=400
    }}
  </component>
  <code>
    {{display-component componentName='ui-slider'
      ticks="0,100,200,150,400"
      ticksLabels="$0,$100,$200,$300,$400"
      ticksSnapBounds=15
      tooltip='hide'
      min=0
      max=400
    }}
  </code>
  <description>
    <p>
      Ticks allow for various values on the range to be highlighted visually. You can also set the <prop>ticksSnapBounnds</prop> property to "pull" the selection to these tick marks. In addition you can adjust the following properties:
    </p>
  </description>
</row>
<row>
  <component>
    {{ui-slider
      ticks="0,200,400"
      ticksLabels="Terrible,Neutral,Great"
      ticksSnapBounds=15
      mood='rag'
      sections=3
      tooltip='hide'
      min=0
      max=400
      immediateResponse=immediateResponse2
    }}
  </component>
  <code>
    {{display-component componentName='ui-slider'
      ticks="0,200,400"
      ticksLabels="Terrible,Neutral,Great"
      ticksSnapBounds=15
      mood='rag'
      sections=3
      tooltip='hide'
      min=0
      max=400
      immediateResponse=immediateResponse2
    }}
  </code>
  <description>
    <p>
      Combining ticks with the styling from the above section. The effect varies based on how frequently you update the value:
    </p>
    <controls>
      <control>
        <span class='name'>update frequency:</span>
        <span>{{ui-toggle-button on='immediate' off='after release' value=immediateResponse2  onToggle=(mut immediateResponse2)}}</span>
      </control>
    </controls>
  </description>
</row>


<h3>Data down, actions up</h3>
<row>
  <component>
    {{ui-slider
      defaultValue=defaultValue
    }}
  </component>
  <code>
    {{display-component componentName='ui-slider'
      defaultValue=defaultValue
    }}
  </code>
  <description>
    In the previous example you saw that there is a two-way binding to <prop>value</prop> but if you prefer a one-way binding then this can be achieved by just binding to the <prop>defaultValue</prop> property instead.
  </description>
</row>
<row>
  <component>
    {{ui-slider
      value=DDAUvalue
      defaultValue=defaultValue2
      min=min2
      max=max2
      step=step2
      action='action'
      error='error'
      changed='changed'
      disabled=disabled2
    }}
  </component>
  <code>
    {{display-component componentName='ui-slider'
      value=DDAUvalue
      defaultValue=defaultValue2
      min=min2
      max=max2
      step=step2
      action='action'
      error='error'
      changed='changed'
      disabled=disabled2
    }}
  </code>
  <description>
    There are three actions available for containers to bind action handlers to:

    <ul>
      <li><b>action</b> - provides a commentary actions such as <i>slideStart</i>, <i>slideStop</i>, <i>slideEnabled</i>, and <i>slideDisabled</i></li>
      <li><b>error</b> - indicates when constraints have been violated</li>
      <li><b>changed</b> - indicates when values have changed</li>
    </ul>

    <controls>
      <control>
        <span class='name'>set value to:</span>
        <span>{{ui-buttons buttons='20:::20,60:::60,100:::100,150:::150' value=valueChanged  onChange=(mut valueChanged)}}</span>
      </control>
      <control>
        <span class='name'>Use enable/disable to trigger actions</span>
        <span>{{ui-toggle-button on='disabled' off='enabled' value=disabled2 onToggle=(mut disabled2)}}</span>
      </control>

    </controls>
  </description>
</row>

<h3>Range Slider</h3>
<p>Unlike the normal <prop>ui-slider</prop> the <prop>range-slider</prop> has two values which together represent a range. This component's <prop>value</prop> property is a two element array but outside of that it has more similarities than differences.</p>
<row>
  <component>
    {{range-slider}}
  </component>
  <code>
    {{display-component componentName='range-slider'}}
  </code>
  <description>
    With no parameters, here's what the range slider will look like.
  </description>
</row>
<row>
  <component>
    {{range-slider
      mood=moodRange
      defaultValue='1,5'
    }}
  </component>
  <code>
    {{display-component componentName='range-slider'
      mood=moodRange
    }}
  </code>
  <description>
    You can use mood styles just like with normal sliders. Moods like 'rag' are less sensical here but as always its just CSS so no magic, try whatever you like.
    <controls>
      <control>
      <span class='name'>mood:</span>
        <span>{{radio-buttons buttons='success,info,warning,error' value=moodRange onChange=(mut moodRange)}}</span>
      </control>
    </controls>
  </description>
</row>

{{/app-page}}
